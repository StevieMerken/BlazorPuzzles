@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid

<style>
    .cell-style {
        vertical-align: top;
    }

    .quick-grid tr:nth-child(odd) {
        background-color: #f2f2f2; /* Light grey for odd rows */
        padding-bottom: 10px;
    }

    .quick-grid tr:nth-child(even) {
        background-color: white; /* White for even rows */
        padding-bottom: 10px;
    }
</style>

<PageTitle>Puzzle 13</PageTitle>

@if (people == null)
{
    <p>
        This is a .NET 7 Blazor Server app that loads 5000 people from a JSON file 
        and displays them in a QuickGrid.
    </p>
    <p>
        Your job is to upgrade this project to a .NET 8 Blazor Web App using the new Auto Render Mode.
    </p>
    <p>
        You will need to use the latest NuGet packages for Blazor and QuickGrid, and you will
        need to keep the person data on the server, and not expose the ForeignKey property to the client.
    </p>

    <button @onclick="LoadPeople">Load All People</button>
}
else
{
    <Paginator Value="@pagination" />
    <QuickGrid class="quick-grid"
               Items="@itemsQueryable"
               Pagination="@pagination">
        <PropertyColumn Property="@(p => p.FirstName)" 
                        Title="First Name" 
                        Sortable="true"
                        Class="cell-style" />
        <PropertyColumn Property="@(p => p.LastName)" 
                        Title="Last Name" 
                        Sortable="true"
                        Class="cell-style" />
        <PropertyColumn Property="@(p => p.Bio)" 
                        Title="Bio" 
                        Sortable="true"
                        Class="cell-style" />
        <TemplateColumn Title="Photo" 
                        Class="cell-style">
            @{
                var item = context as Person;
                <img src="@item.PhotoUrl" style="width:50px;" alt="Photo" />
            }
        </TemplateColumn>
    </QuickGrid>
}

@code
{
    List<Person> people = null;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Person>? itemsQueryable;

    void LoadPeople()
    {
        people = PersonsManager.GetAllPeople();
        itemsQueryable = people.AsQueryable();
    }

    protected override void OnInitialized()
    {

    }
}